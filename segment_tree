  const int N=200002;
     int arr[N];
     int t[4*N];
     
     
     struct segmentTree{

            void build(int idx,int l,int r){
                    if(l==r){
                        t[idx]=arr[l];
                        return ;
                    }

                    int mid=(l+r)/2;
                    build(2*idx,l,mid);
                    build(2*idx+1,mid+1,r);
                    t[idx]=t[2*idx]+t[2*idx+1];
            }

            void update(int idx,int l,int r,int pos,int val){

                    if(pos<l || pos>r) return ;
                    if(l==r){
                        t[idx]=val;
                        arr[l]=val;
                        return ;
                    }

                    
                    int mid=(l+r)/2;
                   update(2*idx,l,mid,pos,val);
                    update(2*idx+1,mid+1,r,pos,val);
                    t[idx]=t[2*idx]+t[2*idx+1];

            }

            int query(int idx,int l,int r,int lq,int rq){

                if(l>rq ||lq>r) return 0;

                if(lq<=l && r<=rq){
                        return t[idx];
                }


                int mid=(l+r)/2;

                return query(2*idx,l,mid,lq,rq)+query(2*idx+1,mid+1,r,lq,rq);
            }


     };
    void solve(){

        int n,q;
        cin>>n>>q;

       

        for(int i=0;i<n;i++){
            cin>>arr[i];
        }
  
  segmentTree st;

        st.build(1,0,n-1);

            int type,l,r;
        while(q--){
            cin>>type;
            if(type==1){
                    cin>>l>>r;
                    l--;
                    st.update(1,0,n-1,l,r);
            }
            else {
                  cin>>l>>r;
                  l--; r--;
                 int ans=   st.query(1,0,n-1,l,r);
                    cout<<ans<<endl;
            }
            
        }
        
    }
