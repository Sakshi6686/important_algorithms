class Solution {
public:
   vector<vector<int>> adj;
vector<int> indp,outdp,time;

using pii=pair<int,int>;
   void dfs_in(int node,int p,int tm){
 indp[node]=tm;
time[node]=tm;
    for(auto & v: adj[node]){
        if(v==p)continue;
        int t=(v&1)?tm+1:tm+2;
        dfs_in(v,node,t);
        indp[node]=max(indp[node],indp[v]);
    }


   }

   void dfs(int node,int p){

            pii f={-1,-1};
            pii s={-1,-1};

            for(auto &v : adj[node]){
                    if(v==p)continue;
                if(indp[v]>f.first) {
                   s=f;
                    f.first=indp[v];
                    f.second=v;
                    
                }
                else if(indp[v]<=f.first && indp[v]>s.first){
                    s.first=indp[v];
                    s.second=v;
                }
            }


 
            for(auto & v: adj[node]){
             if(v==p)continue;
            int nd=(f.first==indp[v])?s.second:f.second;
            int del=(node&1)?1:2;
            int change;
            if(nd==-1)change=0;
            else change=indp[nd]-time[node];

                    outdp[v]=max({change+del ,outdp[node]+del});   

                    dfs(v,node);    
            }

   }
    vector<int> timeTaken(vector<vector<int>>& edges) {
        int n=(int)edges.size()+1;
        adj.clear();
        adj.resize(n);
      
        time.resize(n);
        for(auto  e :edges){
            int u=e[0];int v=e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }


          indp.assign(n,0);
        outdp.assign(n,0);

dfs_in(0,-1,0);

dfs(0,-1);

  vector<int> ans(n);

        for(int i=0;i<n;i++){
          ans[i]=max(indp[i]-time[i],outdp[i]);  
        }
       
        return ans;


    }
};
