    int n;
       vector<int> adj[100001];
       int parent[100001][21];
         int depth[100001];
       void dfs(int node,int par,int dep){

              parent[node][0]=par;  
              depth[node]=dep;

              for(int i=1;i<=20;i++){
               
                parent[node][i]=parent[parent[node][i-1]][i-1];
              }

            for(auto v :adj[node]){
              if(v!=par){
                 dfs(v,node,dep+1);
              }
            }
       }

       int lca (int u,int v){
        if(depth[u]>depth[v]) swap(u,v);


        for(int i=20;i>=0;i--){
          if((depth[v]-depth[u])&(1<<i))
                v=parent[v][i];
        }

        if(u==v) return u;

          for(int i=20;i>=0;i--){
          if(parent[u][i]!=parent[v][i]){
  v=parent[v][i];
                u=parent[u][i];
          }
              
        }

        return parent[u][0];
       }
