// ncr using dp
vector<vector<int>> ncr(n+1,vector<int> (k+1,0)); 

        for(int i=0;i<=n;i++){
            ncr[i][0]=1;
            for(int j=1;j<=min(i,k);j++){
                ncr[i][j]=(ncr[i-1][j-1]+ncr[i-1][j])%mod;
            }
        }


// precompute fact
const int mod=1e9+7;
    vector<int> fact;
    int pow(int a,int b){

        int res=1;
        a=a%mod;
        while(b>0){
            if(b&1) res=(1LL*res*a)%mod;
            a=(1LL*a*a)%mod;
            b>>=1;
        }

        return res;
    }
void precomputeFact(int n){
 fact.assign(n + 1, 1);
            
        for(int i=1;i<=n;i++){  
                fact[i]=(1LL*fact[i-1]*i)%mod;
        }
    }

  int ncr(int n,int r) {
  if (r > n || r < 0) return 0;
            int nume= fact[n];
            int deno= (1LL*fact[r]*fact[n-r])%mod;
            

            return (1LL*nume*pow(deno,mod-2))%mod;

    }
